FADE IN:

INT. CIA CLASSROOM - LATER THAT DAY

Mizrahi begins his lecture on shell scripting.

PROFESSOR MIZRAHI
Welcome back, everyone. Today, we'll be discussing shell scripting, which is an essential skill for any Unix systems administrator or software engineer.

PROFESSOR MIZRAHI
A shell script is a program written in a Unix shell language, such as bash or ksh. It is used to automate tasks, perform system maintenance, and create customized tools.

Mizrahi demonstrates by writing a simple shell script that prints a message to the console.

PROFESSOR MIZRAHI
As you can see, a shell script consists of commands and statements written in the shell language. It can be executed by typing the name of the script in the terminal window.

PROFESSOR MIZRAHI
Variables are used in shell scripts to store data and values. They can be assigned values using the '=' operator and can be referenced using the '$' symbol.

PROFESSOR MIZRAHI
Let's start by creating a new file with the '.sh' extension. This will be our shell script.

Mizrahi opens a terminal window on his laptop and creates a new file called 'hello.sh'.

PROFESSOR MIZRAHI
Now, let's add the code to print a message to the console. We'll use the 'echo' command to do this.

Mizrahi types the following code into the 'hello.sh' file:

bash
Copy code
#!/bin/bash
echo "Hello, world!"
PROFESSOR MIZRAHI
This script will simply print the message 'Hello, world!' to the console when executed. The first line '#!/usr/bin/env bash' is called the shebang and tells the system to use the bash shell to run the script.

Mizrahi saves the file and makes it executable using the 'chmod' command.

PROFESSOR MIZRAHI
To run the script, we simply type './hello.sh' in the terminal window.

Mizrahi runs the script and the message 'Hello, world!' is printed to the console.

PROFESSOR MIZRAHI
There are different types of data that can be stored in variables, such as strings, numbers, and arrays. It's important to understand the data type of a variable when working with it in a script.

PROFESSOR MIZRAHI
Functions are a way to organize code and make it reusable. They allow you to define a block of code that can be called from other parts of the script.

Mizrahi types the following code into the terminal window:

bash
Copy code
#!/bin/bash

function print_name {
  local name=$1
  echo "Hello, $name!"
}

print_name "John"
PROFESSOR MIZRAHI
In this example, we've defined a function called 'print_name' that takes a parameter 'name' and prints a greeting message. We've also used the 'local' keyword to create a local variable 'name' within the function to avoid overwriting any global variables with the same name.

Mizrahi continues with regular expressions and pattern matching.

PROFESSOR MIZRAHI
Regular expressions are a powerful tool for matching patterns in text. They allow you to search for specific patterns of characters, such as email addresses or phone numbers.

Mizrahi types the following code into the terminal window:

bash
Copy code
#!/bin/bash

regex="[0-9]{3}-[0-9]{3}-[0-9]{4}"
if [[ $1 =~ $regex ]]
then
  echo "Valid phone number: $1"
else
  echo "Invalid phone number: $1"
fi
PROFESSOR MIZRAHI
In this example, we've used a regular expression to validate a phone number that is passed as a command line argument. The regular expression '[0-9]{3}-[0-9]{3}-[0-9]{4}' matches a phone number in the format 'xxx-xxx-xxxx'.

Mizrahi proceeds to command line arguments.

PROFESSOR MIZRAHI
Command line arguments allow you to pass parameters to a script when it's executed. They're useful for making a script more flexible and customizable.

Mizrahi types the following code into the terminal window:

bash
Copy code
#!/bin/bash

while [[ $# -gt 0 ]]
do
  key="$1"
  case $key in
    -f|--file)
    file="$2"
    shift
    shift
    ;;
    -v|--verbose)
    verbose=true
    shift
    ;;
    *)
    shift
    ;;
  esac
done

echo "File: $file"
echo "Verbose: $verbose"
PROFESSOR MIZRAHI
In this example, we've used a 'while' loop to process the command line arguments passed to the script. The 'case' statement allows us to handle different argument options, such as '-f' or '--file', and assign their corresponding values to variables.

Mizrahi concludes with script debugging and error handling, and working with files and directories.

PROFESSOR MIZRAHI
Script debugging and error handling are important to ensure that your scripts run smoothly and without unexpected errors. And working with files and directories is a fundamental part of shell scripting, as it allows you to read, write, and manipulate files and directories on your system.

PROFESSOR MIZRAHI
Let's expand further on shell scripting. In addition to the topics we covered earlier, there are several other important concepts to understand.

Mizrahi begins by discussing input and output redirection.

PROFESSOR MIZRAHI
Input and output redirection allow you to control where input is coming from and where output is going to. The most common forms of redirection are '>', which redirects output to a file, and '<', which redirects input from a file.

Mizrahi types the following code into the terminal window:

bash
Copy code
#!/bin/bash

# Redirecting output to a file
echo "Hello, world!" > output.txt

# Redirecting input from a file
while read line
do
  echo $line
done < input.txt
PROFESSOR MIZRAHI
In this example, we've redirected the output of the 'echo' command to a file called 'output.txt'. We've also redirected the input of the 'while' loop to read from a file called 'input.txt'.

Mizrahi then discusses piping.

PROFESSOR MIZRAHI
Piping allows you to connect the output of one command to the input of another command. This is useful for chaining commands together and creating more complex operations.

Mizrahi types the following code into the terminal window:

bash
Copy code
#!/bin/bash

# Piping commands together
ls -l | grep 'txt'
PROFESSOR MIZRAHI
In this example, we've used the 'ls' command to list the files in the current directory, and then piped that output to the 'grep' command to search for files with the 'txt' extension.

Mizrahi then discusses process management and scheduling.

PROFESSOR MIZRAHI
Process management and scheduling are important for controlling the behavior of processes on your system. This includes tasks such as starting and stopping processes, controlling process priorities, and scheduling tasks to run at specific times.

Mizrahi types the following code into the terminal window:

bash
Copy code
#!/bin/bash

# Starting a background process
sleep 10 &
pid=$!
echo "Background process ID: $pid"

# Changing process priority
renice -n 10 -p $pid

# Scheduling a task
echo "This command will run in 5 minutes."
echo "sleep 60" | at now + 5 minutes

PROFESSOR MIZRAHI
In this example, we've started a background process using the 'sleep' command and captured its process ID using the '$!' variable. We've also changed the process priority using the 'renice' command. Finally, we've scheduled a task to run in 5 minutes using the 'at' command.

PROFESSOR MIZRAHI
Organizing your code into reusable libraries can save you time and effort when writing shell scripts. You can use the 'source' command to import external scripts into your current script.

Mizrahi types the following code into the terminal window:

bash
Copy code
#!/bin/bash

# Importing a library
source my_library.sh

# Using a function from the library
hello_world
PROFESSOR MIZRAHI
In this example, we're importing a library called 'my_library.sh' and using a function called 'hello_world' from that library.

Mizrahi then discusses reactive scripting.

PROFESSOR MIZRAHI
Reactive scripting is the process of automatically responding to events in your environment. This can be accomplished using tools such as 'inotifywait', which allows you to monitor a file or directory for changes and trigger an action in response.

Mizrahi types the following code into the terminal window:

bash
Copy code
#!/bin/bash

# Monitoring a directory for changes
while inotifywait -r -e modify /var/log
do
  echo "Log file modified!"
done

PROFESSOR MIZRAHI
In this example, we're using 'inotifywait' to monitor the '/var/log' directory for modifications. Whenever a modification occurs, we print a message to the console.

PROFESSOR MIZRAHI
Scripts can help automate repetitive tasks and ensure consistency across multiple systems. They can also help with monitoring and troubleshooting by collecting and analyzing system data.

Mizrahi then discusses some strategies for using scripts in system administration.

PROFESSOR MIZRAHI
One strategy is to use scripts to install and configure software across multiple systems. This can be especially useful when deploying new systems or when updating existing systems.

Another strategy is to use scripts for system backups and disaster recovery. Scripts can automate the backup process and ensure that critical data is backed up regularly.

Mizrahi also recommends using scripts for monitoring system performance and resource usage.

PROFESSOR MIZRAHI
You can use scripts to collect system performance data and analyze it to identify potential issues. This can help you proactively address issues before they become serious problems.

PROFESSOR MIZRAHI
For tomorrow's assignment, I want you to create a script that installs and configures the Apache web server on a Linux system. Your script should also configure a virtual host and serve a basic HTML file.

Mizrahi writes the assignment on the whiteboard.

PROFESSOR MIZRAHI
You can use any scripting language you like, but I recommend using Bash or Python. You should also include comments in your code to explain what each section does.

Mizrahi turns to the class.

PROFESSOR MIZRAHI
Remember, scripts are a powerful tool for system administration. With the right script, you can automate almost any task and make your job easier and more efficient.

The recruits nod their heads in agreement.

PROFESSOR MIZRAHI
I look forward to seeing your scripts tomorrow. Good luck.

FADE OUT.


