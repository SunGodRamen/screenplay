Lesson 3: Error Handling in Rust

The Result and Option Types
Rust has two primary types for handling errors and representing the absence of a value: Result and Option.

Result is an enum with two variants: Ok(T) and Err(E). It is used to represent the return value of a function that might produce an error. If the function succeeds, the return value is wrapped in the Ok variant; if it fails, the error value is wrapped in the Err variant.

Example: Using Result

    use std::fs::File;

    fn main() {
        let file = open_file("example.txt");

        match file {
            Ok(file) => println!("File opened successfully: {:?}", file),
            Err(error) => println!("Failed to open file: {}", error),
        }
    }

    fn open_file(filename: &str) -> Result<File, std::io::Error> {
        File::open(filename)
    }

Option is an enum with two variants: Some(T) and None. It is used to represent the presence or absence of a value, without providing error details. Option is often used when a function might return a valid value or nothing at all.

Example: Using Option

    fn main() {
        let numbers = vec![1, 2, 3, 4, 5];

        let result = find(&numbers, 3);

        match result {
            Some(index) => println!("Found 3 at index {}", index),
            None => println!("3 was not found in the list"),
        }
    }

    fn find(numbers: &[i32], target: i32) -> Option<usize> {
        for (index, &number) in numbers.iter().enumerate() {
            if number == target {
                return Some(index);
            }
        }
        None
    }

Error Propagation and Handling
When a function returns a Result type, it's common to propagate the error to the calling function instead of handling it immediately. This can be achieved using the ? operator.

Example: Error Propagation

    use std::fs::File;
    use std::io::Read;

    fn main() {
        match read_file_contents("example.txt") {
            Ok(contents) => println!("File contents: {}", contents),
            Err(error) => println!("Failed to read file: {}", error),
        }
    }

    fn read_file_contents(filename: &str) -> Result<String, std::io::Error> {
        let mut file = File::open(filename)?; // Propagate the error using the ? operator
        let mut contents = String::new();
        file.read_to_string(&mut contents)?;
        Ok(contents)
    }

The ? operator can be used with both Result and Option types. It is important to note that the function using the ? operator must have a compatible return type.

Custom Error Types and the std::error::Error Trait
Creating custom error types can improve error handling and provide more meaningful error messages. Custom error types can implement the std::error::Error trait, which requires implementing the fmt::Display trait and providing a source method.

Example: Custom Error Type

    use std::error::Error;
    use std::fmt;

    #[derive(Debug)]
    enum CustomError {
        IoError(std::io::Error),
        ParseIntError(std::num::ParseIntError),
    }

    impl fmt::Display for CustomError {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            match self {
                CustomError::IoError(e) => write!(f, "I/O error: {}", e),
                CustomError::ParseIntError(e) => write!(f, "Parse int error: {}", e),
            }
        }
    }

    impl Error for CustomError {
        fn source(&self) -> Option<&(dyn Error + 'static)> {
            match self {
                CustomError::IoError(e) => Some(e),
                CustomError::ParseIntError(e) => Some(e),
            }
        }
    }

    impl From<std::io::Error> for CustomError {
        fn from(error: std::io::Error) -> Self {
            CustomError::IoError(error)
        }
    }

    impl From<std::num::ParseIntError> for CustomError {
        fn from(error: std::num::ParseIntError) -> Self {
            CustomError::ParseIntError(error)
        }
    }

    // Function using the custom error type
    fn parse_file_length(filename: &str) -> Result<usize, CustomError> {
        let content = std::fs::read_to_string(filename)?; // Automatically converts std::io::Error to CustomError
        let length = content.parse::<usize>()?; // Automatically converts std::num::ParseIntError to CustomError
        Ok(length)
    }

    fn main() {
        match parse_file_length("example.txt") {
            Ok(length) => println!("File length: {}", length),
            Err(e) => println!("Error: {}", e),
        }
    }

In the example above, we define a custom error type CustomError with two variants: IoError and ParseIntError. We implement the std::error::Error trait for CustomError, along with the fmt::Display trait to provide a custom error message. We also implement the From trait for each error type that our custom error type wraps. This allows us to use the ? operator for automatic error conversion.

This concludes our in-depth lesson on error handling in Rust. We have covered the Result and Option types, error propagation and handling, and custom error types with the std::error::Error trait. These concepts are essential for building robust Rust applications that can gracefully handle errors and provide meaningful feedback to users. In the following lectures, we will explore Rust's data structures, concurrency, and other advanced topics.
