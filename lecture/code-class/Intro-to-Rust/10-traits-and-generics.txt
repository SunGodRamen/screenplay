Lesson 10: Traits and Generics

Defining and Implementing Traits
Traits are a way to define shared behavior across different types. They are similar to interfaces in other languages. You can define a trait using the trait keyword and implement it for different types using the impl keyword.

Example: Defining and Implementing Traits

    trait Speak {
        fn speak(&self);
    }

    struct Human;
    struct Dog;

    impl Speak for Human {
        fn speak(&self) {
            println!("Hello!");
        }
    }

    impl Speak for Dog {
        fn speak(&self) {
            println!("Woof!");
        }
    }

    fn main() {
        let human = Human;
        let dog = Dog;

        human.speak();
        dog.speak();
    }

Generics and Associated Types
Generics allow you to write code that is reusable across different types. They are similar to templates in C++ and Java generics. Associated types are a way to define associated items within a trait, such as types, constants, or functions.

Example: Generics and Associated Types

    trait Animal {
        type Sound;
        fn make_sound(&self) -> Self::Sound;
    }

    struct Cat;
    struct Cow;

    impl Animal for Cat {
        type Sound = String;

        fn make_sound(&self) -> Self::Sound {
            "Meow!".to_string()
        }
    }

    impl Animal for Cow {
        type Sound = &'static str;

        fn make_sound(&self) -> Self::Sound {
            "Moo!"
        }
    }

    fn print_sound<T: Animal>(animal: &T) {
        println!("The animal makes: {}", animal.make_sound());
    }

    fn main() {
        let cat = Cat;
        let cow = Cow;

        print_sound(&cat);
        print_sound(&cow);
    }

Trait Objects and Dynamic Dispatch
Trait objects allow you to use dynamic dispatch, which defers the decision of which implementation to call until runtime. This can be useful when you want to work with multiple types that implement a trait without knowing their concrete types at compile time.

Example: Trait Objects and Dynamic Dispatch

    trait Drawable {
        fn draw(&self);
    }

    struct Circle;
    struct Square;

    impl Drawable for Circle {
        fn draw(&self) {
            println!("Drawing a circle");
        }
    }

    impl Drawable for Square {
        fn draw(&self) {
            println!("Drawing a square");
        }
    }

    fn draw_all(shapes: &[&dyn Drawable]) {
        for shape in shapes {
            shape.draw();
        }
    }

    fn main() {
        let circle = Circle;
        let square = Square;

        let shapes: [&dyn Drawable; 2] = [&circle, &square];
        draw_all(&shapes);
    }

This example demonstrates how to use trait objects and dynamic dispatch with the Drawable trait. The draw_all function accepts a slice of trait objects, which allows it to work with any type that implements Drawable without knowing the concrete types at compile time.

This concludes our in-depth lesson on traits and generics in Rust. We've covered defining and implementing traits, generics and associated types, and trait objects with dynamic dispatch. These concepts are essential for writing flexible, reusable, and efficient code in Rust.
