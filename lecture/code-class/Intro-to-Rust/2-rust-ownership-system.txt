Lesson 2: Rust's Ownership System

Ownership and Borrowing
In Rust, every value has a single owner, which is responsible for managing the value's memory. When the owner goes out of scope, Rust automatically deallocates the memory. This ownership system eliminates the need for garbage collection and helps ensure memory safety.

Example: Ownership and Scope

    fn main() {
        {
            let s = String::from("hello");
            // s is valid and owns the memory containing "hello"
        } // s goes out of scope, and Rust deallocates the memory

        // Using s here would result in a compile-time error
    }

Borrowing allows values to be temporarily shared or mutated without transferring ownership. There are two types of borrowing in Rust:

Immutable borrowing: Multiple immutable references to a value are allowed simultaneously, but no mutable references are allowed.
Mutable borrowing: Only one mutable reference to a value is allowed, and no immutable references are allowed.
Example: Borrowing

    fn main() {
        let s = String::from("hello");

        // Immutable borrow
        let len = calculate_length(&s);
        println!("The length of '{}' is {}.", s, len);

        // Mutable borrow
        let mut s_mut = String::from("hello");
        change(&mut s_mut);
        println!("Changed string: {}", s_mut);
    }

    fn calculate_length(s: &String) -> usize {
        s.len()
    }

    fn change(s: &mut String) {
        s.push_str(", world");
    }

Move Semantics
When a value is assigned to another variable or passed to a function, Rust uses move semantics by default. This means that ownership of the value is transferred, and the original variable is no longer valid. Move semantics prevent double-free errors and other common memory issues.

Example: Move Semantics

    fn main() {
        let s1 = String::from("hello");
        let s2 = s1; // s1 is moved to s2

        // Using s1 here would result in a compile-time error

        let s3 = String::from("world");
        takes_ownership(s3);

        // Using s3 here would result in a compile-time error
    }

    fn takes_ownership(s: String) {
        println!("I own {} now!", s);
    }

To create a deep copy of a value without transferring ownership, use the clone method:

    fn main() {
        let s1 = String::from("hello");
        let s2 = s1.clone(); // s1 is not moved; s2 is a deep copy

        println!("s1: {}, s2: {}", s1, s2);
    }

Lifetimes and Their Annotations
Lifetimes are a way to express the scope of a reference in the type system. They help the compiler ensure that references remain valid throughout their usage. By default, Rust can infer lifetimes for most cases. However, when there is ambiguity, you need to explicitly annotate lifetimes.

Lifetimes are denoted by an apostrophe followed by a lowercase letter, such as 'a. Lifetime annotations are placed between the & and the type in a reference.

Example: Lifetimes

    fn main() {
        let s1 = String::from("long string is long");
        let s2 = String::from("xyz");
        let result = longest(&s1, &s2);
        println!("The longest string is {}", result);
    }

    // The 'a lifetime annotation indicates that the returned reference
    // will live at least as long as the shorter of the two input references.
    fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {
        if s1.len() > s2.len() {
            s1
        } else {
            s2
        }
    }

In the example above, the 'a lifetime annotation is used to express that the returned reference from the longest function will have the same lifetime as the shorter of the two input references. This ensures that the reference returned by the function remains valid.

Keep in mind that lifetime annotations can be added to structs as well, which is useful when the struct contains references:

    struct Excerpt<'a> {
        part: &'a str,
    }

    fn main() {
        let novel = String::from("Call me Ishmael. Some years ago...");
        let first_sentence = novel.split('.').next().expect("Could not find a '.'");
        let i = Excerpt { part: first_sentence };
        println!("Excerpt: {}", i.part);
    }

In this example, we define a struct Excerpt that contains a reference to a string slice. We use the lifetime annotation 'a to ensure that the reference to the string slice in the struct remains valid for the lifetime of the struct.

This concludes our in-depth lesson on Rust's ownership system. We've covered ownership and borrowing, move semantics, and lifetimes with their annotations. Understanding these concepts is crucial for writing safe and efficient Rust code, as they form the foundation of Rust's memory safety guarantees. In the next lessons, we will delve into error handling, data structures, and other advanced Rust topics.
