Lecture 9: Network Services and Protocols

I. Overview of common network services: SSH, FTP, NFS, and Samba
A. SSH (Secure Shell)

Secure remote access to a Unix system
Replaces insecure protocols like Telnet and Rlogin
Encrypted communication
Port: 22
B. FTP (File Transfer Protocol)

Transfers files between a client and a server
Insecure; replaced by SFTP (SSH File Transfer Protocol)
Ports: 20 (data), 21 (control)
C. NFS (Network File System)

Allows file sharing between Unix systems
Mounts remote file systems as if they were local
Port: 2049
D. Samba

File and printer sharing between Unix and Windows systems
Implements the SMB (Server Message Block) protocol
Ports: 137-139 (NetBIOS), 445 (SMB)
II. Configuring and troubleshooting network services
A. Configuring network services

Use configuration files (e.g., /etc/ssh/sshd_config, /etc/vsftpd.conf, /etc/exports, /etc/samba/smb.conf)
Restart the service to apply changes (e.g., systemctl restart sshd, systemctl restart vsftpd, systemctl restart nfs-server, systemctl restart smbd)
B. Troubleshooting network services

Check logs (e.g., /var/log/secure, /var/log/vsftpd.log, /var/log/syslog, /var/log/samba/log.smbd)
Use diagnostic tools (e.g., ssh -vvv, ftp, showmount, smbclient)
Check firewall settings
III. Introduction to network protocols: TCP/IP, UDP, and ICMP
A. TCP/IP (Transmission Control Protocol/Internet Protocol)

Connection-oriented protocol
Guarantees data delivery through error checking and retransmission
Widely used for reliable communication (e.g., HTTP, SSH, FTP)
B. UDP (User Datagram Protocol)

Connectionless protocol
No guarantee of data delivery
Used for time-sensitive applications where speed is more important than reliability (e.g., video streaming, DNS)
C. ICMP (Internet Control Message Protocol)

Error reporting and diagnostic protocol
Used for network troubleshooting (e.g., ping, traceroute)
IV. Working with network services and protocols in Rust
A. Creating an SSH client

Rust does not have a built-in SSH library, but you can use an external crate like "ssh2" to create an SSH client. Add the "ssh2" crate to your Cargo.toml file and run the following example:

    use ssh2::Session;
    use std::io::prelude::*;
    use std::net::TcpStream;
    use std::str;

    fn main() {
        let username = "your-username";
        let password = "your-password";
        let host = "example.com";
        let port = 22;

        let tcp = TcpStream::connect((host, port)).unwrap();
        let mut session = Session::new().unwrap();
        session.set_tcp_stream(tcp);
        session.handshake().unwrap();
        session.userauth_password(username, password).unwrap();

        assert!(session.authenticated());

        let mut channel = session.shell().unwrap();
        channel.write
        channel.write_all(b"uname -a\n").unwrap();
        channel.send_eof().unwrap();
        let mut output = String::new();
        channel.read_to_string(&mut output).unwrap();
        println!("SSH output: {}", output);
        channel.wait_close().unwrap();
    }

In this example, we use the "ssh2" crate to create an SSH client that connects to a remote host using a username and password. After authenticating, the client opens a shell channel, sends the "uname -a" command to display the remote system's information, and reads the output. Finally, the client closes the channel.

B. Creating a simple TCP server and client

Server:

    use std::io::{Read, Write};
    use std::net::{TcpListener, TcpStream};
    use std::thread;

    fn handle_client(mut stream: TcpStream) {
        let mut buffer = [0; 512];
        loop {
            let bytes_read = stream.read(&mut buffer).unwrap();
            if bytes_read == 0 {
                return;
            }
            stream.write(&buffer[..bytes_read]).unwrap();
        }
    }

    fn main() {
        let listener = TcpListener::bind("127.0.0.1:8080").unwrap();
        for stream in listener.incoming() {
            let stream = stream.unwrap();
            thread::spawn(|| handle_client(stream));
        }
    }

Client:

    use std::io::{Read, Write};
    use std::net::TcpStream;

    fn main() {
        let mut stream = TcpStream::connect("127.0.0.1:8080").unwrap();
        stream.write_all(b"Hello, server!").unwrap();
        let mut buffer = [0; 512];
        let bytes_read = stream.read(&mut buffer).unwrap();
        let response = String::from_utf8_lossy(&buffer[..bytes_read]);
        println!("Received: {}", response);
    }

In this example, we create a simple TCP server and client using Rust's std::net module. The server listens on port 8080 and echoes back any data it receives from clients. The client connects to the server, sends a message, and receives the server's response.

In conclusion, understanding network services and protocols is essential for network administrators and software engineers. Unix systems provide a variety of network services like SSH, FTP, NFS, and Samba. Network services can be configured and troubleshot using configuration files, logs, and diagnostic tools. Common network protocols include TCP/IP, UDP, and ICMP. In Rust, you can work with network services and protocols using the std::net module and external crates like "ssh2" for creating SSH clients.
