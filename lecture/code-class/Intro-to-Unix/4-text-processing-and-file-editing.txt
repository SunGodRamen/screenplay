Lecture 4: Text Processing and File Editing

I. Advanced usage of text editors and comparison: vi, vim, nano, and emacs
A. vi

Classic Unix text editor created by Bill Joy
Modal interface: normal mode (navigate and manipulate text), insert mode (edit text), command-line mode (execute commands)
Steeper learning curve, but powerful once mastered
Installed by default on most Unix-based systems
B. vim (Vi IMproved)

An improved version of vi developed by Bram Moolenaar
Retains vi's modal interface but adds features such as syntax highlighting, code folding, and plugins
Highly customizable and extensible
Widely used and often considered the standard Unix text editor
C. nano

A lightweight, user-friendly text editor developed by Chris Allegretta
Designed for ease of use, with a simple interface and on-screen help
Lacks the advanced features and customization options of vim and emacs
A popular choice for casual editing and new Unix users
D. emacs

A powerful, extensible text editor developed by Richard Stallman for the GNU project
Non-modal interface with extensive keyboard shortcuts
Can be customized using Emacs Lisp (elisp) programming language
Known for its ability to serve as an integrated development environment (IDE) and support for various programming languages
II. Common file manipulation and text processing commands for network administrators: grep, sed, and awk
A. grep

Searches for a pattern in one or more files
Can use regular expressions for complex pattern matching
Example: grep 'error' /var/log/syslog
B. sed (Stream EDitor)

A command-line text editor that operates on input streams
Performs text transformations such as substitution, deletion, and insertion
Example: sed 's/old_string/new_string/g' input_file > output_file
C. awk

A text processing tool that operates on a line-by-line basis
Designed for data extraction, report generation, and simple text transformations
Supports a full programming language for complex text processing tasks
Example: awk '{print $1, $3}' input_file
III. Text processing in Rust
A. Reading and writing files

    use std::fs::File;
    use std::io::{self, BufRead, BufWriter, Write};
    use std::path::Path;

    fn main() -> io::Result<()> {
        let input_path = Path::new("input_file.txt");
        let output_path = Path::new("output_file.txt");

        let input_file = File::open(&input_path)?;
        let output_file = File::create(&output_path)?;

        let reader = io::BufReader::new(input_file);
        let mut writer = BufWriter::new(output_file);

        for line in reader.lines() {
            let line = line?;
            writeln!(&mut writer, "{}", line)?;
        }

        Ok(())
    }

B. grep-like functionality in Rust

    use std::fs::File;
    use std::io::{self, BufRead};
    use std::path::Path;

    fn main() -> io::Result<()> {
        let search_pattern = "error";
        let file_path = Path::new("/var/log/syslog");

        let file = File::open(&file_path)?;
        let reader = io::BufReader::new(file);

        for line in reader.lines() {
            let line = line?;
            if line.contains(search_pattern) {
                println!("{}", line);
            }
        }

        Ok(())
    }

In this example, we implement grep-like functionality in Rust by opening a file, reading it line by line, and printing lines that contain a specified pattern.

C. sed-like functionality in Rust

    use std::fs::File;
    use std::io::{self, BufRead, BufWriter, Write};
    use std::path::Path;

    fn main() -> io::Result<()> {
        let input_path = Path::new("input_file.txt");
        let output_path = Path::new("output_file.txt");

        let input_file = File::open(&input_path)?;
        let output_file = File::create(&output_path)?;

        let reader = io::BufReader::new(input_file);
        let mut writer = BufWriter::new(output_file);

        for line in reader.lines() {
            let line = line?;
            let modified_line = line.replace("old_string", "new_string");
            writeln!(&mut writer, "{}", modified_line)?;
        }

        Ok(())
    }

In this example, we implement sed-like functionality in Rust by opening an input file, reading it line by line, performing a string substitution, and writing the result to an output file.

IV. Regular expressions in Unix and Rust
A. Regular expressions in Unix

Used in various Unix commands like grep, sed, and awk for pattern matching
Syntax:
a. .: Matches any single character
b. *: Matches zero or more occurrences of the preceding character
c. +: Matches one or more occurrences of the preceding character
d. ?: Matches zero or one occurrence of the preceding character
e. [abc]: Matches any character in the set (a, b, or c)
f. [^abc]: Matches any character not in the set (not a, b, or c)
g. {n}: Matches exactly n occurrences of the preceding character
h. {n,m}: Matches between n and m occurrences of the preceding character
B. Regular expressions in Rust

Rust provides the regex crate for working with regular expressions
Example:

    use regex::Regex;
    use std::fs::File;
    use std::io::{self, BufRead};
    use std::path::Path;

    fn main() -> io::Result<()> {
        let re = Regex::new(r"\berror\b").unwrap();
        let file_path = Path::new("/var/log/syslog");

        let file = File::open(&file_path)?;
        let reader = io::BufReader::new(file);

        for line in reader.lines() {
            let line = line?;
            if re.is_match(&line) {
                println!("{}", line);
            }
        }

        Ok(())
    }

In this example, we use the regex crate to create a regular expression pattern and search for matches within the lines of a file.
